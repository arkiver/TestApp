<script type="text/javascript">
    var tasksData = <%= @tasks.as_json.to_json.html_safe %>;

    _.templateSettings = {
        interpolate: /\{\{\=(.+?)\}\}/g,
        evaluate: /\{\{(.+?)\}\}/g
    };
</script>

<div id="container"></div>

<script type="text/template" id="tasksTemplate">
    <div id="taskForm">
        <input type="text" id="taskInput" placeholder="Enter task title">
        <textarea placeholder="Enter Task Description" id="descInput"></textarea>
        <input type="submit" id="taskSubmit">
    </div>

    {{ _.each(tasks, function(task){ }}
        <div class="task">
            <a href="#" class="deleteTask" data-tid="{{= task.get('id') }}">Delete</a>
            <a href="#" class="selectTask" data-tid="{{= task.get('id') }}">Edit</a>
            <h4>{{= task.get('title') }}</h4>
            <p>{{= task.get('description') }}</p>
        </div>
    {{ }); }}
</script>

<script type="text/javascript">

    window.Tasks = Backbone.Collection.extend({
       url: '/tasks'
    });

    window.Task = Backbone.Model.extend({

        urlRoot: '/tasks',

        defaults: {
            id: null,
            title: '',
            description: ''
        },

        validate: function(attributes) {
            if ( attributes.title === '' &&  attributes.description === '' ) {
                return 'Enter something first';
            }
        }
    });

    window.TasksView = Backbone.View.extend({
        
        el: '#container',

        events: {
            'click #taskSubmit': 'createTask',
            'click .deleteTask': 'deleteTask',
            'click .selectTask': 'selectTask',
            'click #resetTask': 'resetTask'
        },

        initialize: function() {
            this.render();
        },

        render: function() {
            var thisObj = this;
            var allTasks = new Tasks();
            
            allTasks.fetch({
                success: function() {
                    var template = _.template($('#tasksTemplate').html(), {tasks: allTasks.models} );
                    thisObj.$el.html(template);
                }
            });
        },

        createTask: function() {
            var thisObj = this;
                
            var task = new Task();
            var modelId = $('#modelIdInput').val();

            if ( modelId && modelId !== undefined ) {
                var taskDetails = {
                    id: modelId,
                    title: $('#taskInput').val(),
                    description: $('#descInput').val()
                }
            } else {
                var taskDetails = {
                    title: $('#taskInput').val(),
                    description: $('#descInput').val()
                }
            }

            task.save(taskDetails, {
                success: function() {
                    console.log(task.toJSON());
                    thisObj.render();
                }
            });
        },

        selectTask: function(event) {

            var taskTitle,
                taskDescription;

                taskTitle = $(event.target).siblings('h4').text();
                taskDescription = $(event.target).siblings('p').text();
                taskId = $(event.target).data('tid');
                
                // Setting Values in FORM                
                $('#taskInput').val(taskTitle);
                $('#descInput').val(taskDescription);
                $('#resetTask, #modelIdInput').remove();
                $('#taskForm').append('<a href="#" id="resetTask">Reset</a>');
                $('#taskForm').append('<input type="hidden" id="modelIdInput" value="' + taskId + '">');
        },

        resetTask: function() {
            // Setting Values in FORM
            $('#taskInput, #descInput').val('');
            $('#resetTask, #modelIdInput').remove();
        },

        deleteTask: function(event) {

            var thisObj = this;

            var task = new Task({
                id: $(event.target).data('tid')
            }).destroy({
                success: function() {
                    thisObj.render();
                }
            });
        }

    });

    new TasksView();
</script>